{"version":3,"sources":["onset.ts","redux/reducer.ts","redux/store.ts","Speed/Speedometer.tsx","Decompte/DecompteValue.tsx","Counter/Counter.tsx","App.tsx","index.tsx"],"names":["wrapAction","fn","store","dispatch","notifySpeed","createAction","notifyDecompte","notifyTime","window","NotifySpeed","NotifyDecompte","NotifyTime","counterReducer","createReducer","speed","decompte","time","type","state","action","Math","abs","Number","parseFloat","payload","parseInt","configureStore","reducer","Speedometer","playerSpeed","useSelector","appState","rotationFromSpeed","console","log","className","style","transform","Decompte","decompteValue","format","n","Counter","counterValue","seconds","minutes","floor","secondsLeft","msLeft","App","ReactDOM","render","document","getElementById"],"mappings":"mYAQaA,EAAa,SAACC,GAAD,OAAuB,kBAAoBC,EAAMC,SAASF,EAAE,WAAF,gBCJvEG,EAAcC,YAAa,gBAC3BC,EAAiBD,YAAa,mBAC9BE,EAAaF,YAAa,eAGtCG,OAAeC,YAAcT,EAAWI,GACxCI,OAAeE,eAAiBV,EAAWM,GAC3CE,OAAeG,WAAaX,EAAWO,GAUxC,IAOaK,EAAiBC,YAPE,CAC5BC,MAAO,EACPC,UAAW,EACXC,KAAM,IAIiC,mBACtCZ,EAAYa,MAAO,SAACC,EAAOC,GAAR,sBAAyBD,EAAzB,CAChBJ,MAAOM,KAAKC,IAAIC,OAAOC,WAAWJ,EAAOK,eAFN,cAItClB,EAAeW,MAAO,SAACC,EAAOC,GAAR,sBAAyBD,EAAzB,CACnBH,SAAUO,OAAOG,SAASN,EAAOK,cALE,cAOtCjB,EAAWU,MAAO,SAACC,EAAOC,GAAR,sBAAyBD,EAAzB,CACfF,KAAMM,OAAOG,SAASN,EAAOK,cARM,ICzB9BtB,EAAQwB,YAAe,CAAEC,QAASf,ICElCgB,G,MAAc,WAEvB,IAAMC,EAAcC,aAAY,SAACC,GAAD,OAAyBA,EAASjB,SAC5DkB,EAAoBH,GAAe,IAClC,IACOA,EAAc,GAArB,IAIP,OAFAI,QAAQC,IAAI,kBAAmBL,GAG3B,yBAAKM,UAAU,SACX,yBAAKA,UAAU,SAASC,MAAO,CAACC,UAAU,UAAD,OAAYL,EAAZ,UACrC,yBAAKG,UAAU,gBAEnB,yBAAKA,UAAU,aACVN,MCfJS,G,MAAW,WACpB,IAAMC,EAAgBT,aAAY,SAACC,GAAD,OAAyBA,EAAShB,YAEpE,OAA0B,IAAnBwB,EAAuB,yBAAKJ,UAAU,YAAf,IACxBI,EADwB,KAErB,OCLPC,G,MAAS,SAACC,GAAD,OAAuBA,EAAI,GAAJ,WAAaA,GAAb,UAAsBA,KAE/CC,EAAU,WACnB,IAAMC,EAAeb,aAAY,SAACC,GAAD,OAAyBA,EAASf,QAEnEiB,QAAQC,IAAI,UAAWS,GAEvB,IAAMC,EAAUD,EAAe,IACzBE,EAAUzB,KAAK0B,MAAMF,EAAU,IAC/BG,EAAc3B,KAAK0B,MAAMF,EAAU,IACnCI,EAASL,EAAe,IAE9B,OAAwB,IAAjBA,EACH,yBAAKR,UAAU,oBACX,yBAAKA,UAAU,cACVK,EAAOK,GADZ,IACuBL,EAAOO,GAD9B,IAC6CC,IAGnD,MCASC,EAdO,WACpB,OACE,kBAAC,IAAD,CAAU/C,MAAOA,GACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,yBAAKiC,UAAU,cACb,oD,YCRRe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.chunk.js","sourcesContent":["import {store} from \"./redux/store\";\r\nimport { AnyAction } from \"@reduxjs/toolkit\";\r\n\r\n/**\r\n * You should not edit this file this is the function to dispatch actions to the store\r\n * outside of a react component\r\n */\r\ntype ForeignAction = (...args: any[]) => AnyAction;\r\nexport const wrapAction = (fn: ForeignAction) => (...args: any[]) => store.dispatch(fn(...args));\r\n","import { createAction, AnyAction, createReducer } from \"@reduxjs/toolkit\";\r\nimport { wrapAction } from \"../onset\";\r\n\r\n// Here I create an action that takes no argument\r\nexport const notifySpeed = createAction(\"NOTIFY_SPEED\");\r\nexport const notifyDecompte = createAction(\"NOTIFY_DECOMPTE\");\r\nexport const notifyTime = createAction(\"NOTIFY_TIME\");\r\n\r\n// I want this action to be available to Onset so I attach it globally\r\n(window as any).NotifySpeed = wrapAction(notifySpeed);\r\n(window as any).NotifyDecompte = wrapAction(notifyDecompte);\r\n(window as any).NotifyTime = wrapAction(notifyTime);\r\n\r\n// Here I declare the state of my whole application\r\n// I only have one of course because this is only counting\r\nexport interface IAppState {\r\n    speed: number;\r\n    decompte: number;\r\n    time: number;\r\n}\r\n\r\nconst initialState: IAppState = {\r\n    speed: 0,\r\n    decompte: -1,\r\n    time: 0,\r\n};\r\n\r\n// Here it is my reducer, his tasks is to merge the future state with\r\nexport const counterReducer = createReducer(initialState, {\r\n    [notifySpeed.type]: (state, action) => ({ ...state, \r\n        speed: Math.abs(Number.parseFloat(action.payload)),\r\n    }),\r\n    [notifyDecompte.type]: (state, action) => ({ ...state,\r\n        decompte: Number.parseInt(action.payload)\r\n    }),\r\n    [notifyTime.type]: (state, action) => ({ ...state,\r\n        time: Number.parseInt(action.payload)\r\n    })\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { counterReducer } from \"./reducer\";\r\n\r\nexport const store = configureStore({ reducer: counterReducer });\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport \"./speedometer.css\"\r\n\r\nexport const Speedometer = () => {\r\n\r\n    const playerSpeed = useSelector((appState: IAppState) => appState.speed);\r\n    const rotationFromSpeed = playerSpeed <= 20\r\n        ? -140\r\n        : -140 + (playerSpeed - 20);\r\n\r\n    console.log(\"Player Speed : \", playerSpeed);\r\n\r\n    return (\r\n        <div className=\"gauge\">\r\n            <div className=\"needle\" style={{transform: `rotate(${rotationFromSpeed}deg)`}}>\r\n                <div className=\"needleBody\"></div>\r\n            </div>\r\n            <div className=\"textSpeed\">\r\n                {playerSpeed}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport \"./decompte.css\"\r\n\r\nexport const Decompte = () => {\r\n    const decompteValue = useSelector((appState: IAppState) => appState.decompte);\r\n\r\n    return decompteValue !== -1 ? <div className=\"decompte\">\r\n        ({decompteValue})\r\n    </div> : null;\r\n}\r\n","import React from \"react\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./counter.css\"\r\n\r\nconst format = (n: number): String => n < 10 ? `0${n}` : `${n}`;\r\n\r\nexport const Counter = () => {\r\n    const counterValue = useSelector((appState: IAppState) => appState.time)\r\n\r\n    console.log(\"Time : \", counterValue);\r\n\r\n    const seconds = counterValue / 1000;\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secondsLeft = Math.floor(seconds % 60);\r\n    const msLeft = counterValue % 1000;\r\n\r\n    return counterValue !== 0 \r\n    ?   <div className=\"counterContainer\">\r\n            <div className=\"counterBox\">\r\n                {format(minutes)}:{format(secondsLeft)}:{msLeft}\r\n            </div>\r\n        </div>\r\n    : null;\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./redux/store\";\r\nimport { Speedometer } from './Speed/Speedometer';\r\nimport { Decompte } from './Decompte/DecompteValue';\r\nimport { Counter } from './Counter/Counter';\r\n\r\n// This is the main part of the application that will run as soon as the cef is ready and javascript loaded\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Counter />\r\n      <Decompte />\r\n      <Speedometer />\r\n\r\n      <div className=\"helpFooter\">\r\n        <>F1 - Help</> \r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport \"./onset\";\r\nimport \"./css/bulma.css\"\r\nimport \"./css/overrides.css\"\r\n\r\n// This is the react bootstrapping file, nothing interesting here :)\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}